quit
quit()
from io import StringIO
io = StringIO()
json.dump(['streaming API'], io)
import json
json.dump(['streaming API'], io)
io.getvalue()
import json
print(json.dumps({'4': 5, '6': 7}, sort_keys=True, indent=4))
json.loads('["foo", {"bar":["baz", null, 1.0, 2]}]')
import json
def as_complex(dct):
if '__complex__' in dct:
def as_complex(dct):
	if '__complex__' in dct:
		return complex(dct['real'], dct['image'])
	return dct
json.load('{"__complex__": true, "real": 1, "image": 2}, object_hook=as_complex)
json.load('{"__complex__": true, "real": 1, "image": 2},
def as_complex(dct):
    if '__complex__' in dct:
        return complex(dct['real'], dct['imag'])
    return dct
json.loads('{"__complex__": true, "real": 1, "imag": 2}',
    object_hook=as_complex)
json.load('{"__complex__": true, "real": 1, "imag": 2}, object_hook=as_complex)
json.loads('{"__complex__": true, "real": 1, "imag": 2}',
    object_hook=as_complex)
import decimal
json.loads('1.1', parse_float=decimal.Decimal)
# Extendin JSONEncoder:
import json
class ComplexEncoder(json.JSONEncoder):
	def default(self, obj):
		if isinstance(obj, complex):
			return [obj.real, obj.imag]
class ComplexEncoder(json.JSONEncoder):
    def default(self, obj):
        if isinstance(obj, complex):
            return [obj.real, obj.imag]
class ComplexEncoder(json.JSONEncoder):
    def default(self, obj):
        if isinstance(obj, complex):
            return [obj.real, obj.imag]
        # Let the base class default method raise the TypeError
        return json.JSONEncoder.default(self, obj)
json.dumps(2, 1j, cls=ComplexEncoder)
json.dumps(2 + 1j, cls=ComplexEncoder)
json.dumps(2 1j, cls=ComplexEncoder)
class ComplexEncoder(json.JSONEncoder):
    def default(self, obj):
        if isinstance(obj, complex):
            return [obj.real, obj.imag]
        # Let the base class default method raise the TypeError
        return json.JSONEncoder.default(self, obj)
json.dumps(2 1j, cls=ComplexEncoder)
class ComplexEncoder(json.JSONEncoder):
    def default(self, obj):
        if isinstance(obj, complex):
            return [obj.real, obj.imag]
        # Let the base class default method raise the TypeError
        return json.JSONEncoder.default(self, obj)
class ComplexEncoder(json.JSONEncoder):
    def default(self, obj):
        if isinstance(obj, complex):
            return [obj.real, obj.imag]
        # Let the base class default method raise the TypeError
        return json.JSONEncoder.default(self, obj)
json.dumps(2 + 1j, cls=ComplexEncoder)
quit()
